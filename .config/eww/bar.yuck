(include "./templates.yuck")

(defwindow barlaptop
    :monitor '["<primary>", "eDP-1", "0"]'
    :geometry (geometry :x "0%"
                           :y "0%"
                           :width "100%"
                           :height "40"
                           :anchor "top center")
    :stacking "fg"
    :reserve (struts :distance "40px" :side "top")
    :exclusive true
    :windowtype "dock"
    :wm-ignore false
    :focusable false
    (bar :monitor 'eDP-1' :laptop 'yes')
)

(defwindow bar1
    :monitor '["<primary>", "DP-2", "0"]'
    :geometry (geometry :x "0%"
                           :y "0%"
                           :width "100%"
                           :height "40"
                           :anchor "top center")
    :stacking "fg"
    :reserve (struts :distance "40px" :side "top")
    :exclusive true
    :windowtype "dock"
    :wm-ignore false
    (bar :monitor 'DP-2')
)

(defwindow bar2
    :monitor '["HDMI-A-1"]'
    :geometry (geometry :x "0%"
                           :y "0%"
                           :width "100%"
                           :height "40"
                           :anchor "top center")
    :stacking "fg"
    :reserve (struts :distance "40px" :side "top")
    :exclusive true
    :windowtype "dock"
    :wm-ignore false
    (bar :monitor 'HDMI-A-1')
)

(defwindow bar3
    :monitor '["DP-1"]'
    :geometry (geometry :x "0%"
                           :y "0%"
                           :width "100%"
                           :height "40"
                           :anchor "top center")
    :stacking "fg"
    :reserve (struts :distance "40px" :side "top")
    :exclusive true
    :windowtype "dock"
    :wm-ignore false
    (bar :monitor 'DP-1')
)

(deflisten WINDOW_NAME :initial ``
    `./scripts/window.sh`)

(deflisten MODE :initial "default"
    `./scripts/mode.sh`)


(defwidget bar [monitor ?laptop]
    (centerbox
        :class 'bar_class'
        :vexpand false
        :hexpand false
        :orientation "h"
        (box
            :space-evenly false
            :halign "start"
            (home_icon)
            (fsep)
            (workspaces :monitor monitor)
            (fsep)
            (label :class "mode" :visible { MODE != "default" ? true : false }
                :text MODE)
        )
        (box
            :halign "center"
            :hexpand false
            ; A potential idea is to make this the currently playing song
            (label :limit-width 80 :text WINDOW_NAME)
        )
        (box
            :halign "end"
            :space-evenly false
            (systray)
            (bsep)
            ; Width is to keep width consistent with changing text length
            (label :width 50 :class "cpu" :text " ${round(EWW_RAM.used_mem_perc, 0)}% ")
            (label :width 50 :class "cpu" :text " ${round(EWW_CPU.avg, 0)}%")

            ; Wifi network
            (bsep)
            (box :tooltip "${NETWORK.ssid}"
            ; TODO. Make me revealer toggler
            (revealer-on-click :var SHOW_NETWORK :varname "SHOW_NETWORK"
                :class 'network'
                (label :text "${NETWORK.icon} ")
                (label :text "${NETWORK.ip} ")
            ))

            ; Battery
            (box :visible {laptop != ""}(bsep))
            (box :visible {laptop != ""}(revealer-on-hover :var SHOW_BATTERY :varname "SHOW_BATTERY"
                :class 'battery'
                (label :text " ${BATTERY.percent}")
                (label :text {BATTERY.time})
            ))

            ; Weather
            (bsep)
            (revealer-on-hover :var SHOW_WEATHER :varname "SHOW_WEATHER"
                (label :class "weather"
                        :text "${WEATHER.text}")
                (label :class "weather tooltip"
                        :text "${WEATHER.tooltip}")
            )

            ; Date
            (bsep)
            (revealer-on-hover :var SHOW_DATE :varname "SHOW_DATE"
                :transition "slideright"
                (label :class "date" :text TIME)
                (label :class "date" :text DATE)
            )
        )

    )
)

(defpoll TIME :initial "time" :interval "1s"
    `date "+ %H:%M:%S"`)
(defvar SHOW_DATE false)
(defpoll DATE :initial "TIME" :interval "1h"
    `date "+ %a %b %m-%d  "`
)


(defvar SHOW_WEATHER false)
(defpoll WEATHER 
    :initial '{"text": "\u26c5 11.0\u00b0", "alt": "blah", "tooltip": "feels like:  5.1\u00b0, \ud83d\udca8: 29km/h\nRain past hour 5.4mm"}'
    :interval "1h"
    `~/.scripts/weather.py`
)

(defvar SHOW_BATTERY false)
(defvar init_bat ``)
(deflisten BATTERY :initial '{ "percent": "XX%", "time": "X hours "}'
    `./scripts/battery.sh`)

(defvar SHOW_NETWORK false)
(deflisten NETWORK :initial '{"state":"connected","icon":"󰤯","ip":"XXX"}'
    `./scripts/network.sh`)


(defwidget home_icon []
    (box
        :class 'bar_widget'
        (button
            :class 'home_icon'
            :onclick ``
            ''
        )
    )
)

(defwidget fsep []
    (box
        :hexpand false
        :valign "center"
        :class 'seperator'
        "//"
    )
)

(defwidget bsep []
    (box
        :hexpand false
        :valign "center"
        :class 'seperator'
        "\\\\\\\\" ; why so many!
    )
)

(deflisten WORKSPACES :initial '{"DP-2": [], "HDMI-A-1": [], "eDP-1": []}'
    `scripts/workspace.py`)

(defvar reveal false)

(defwidget workspaces [monitor]
    (box :class "bar_widget workspaces" :space-evenly false
    (for wsp in {WORKSPACES[monitor]} (tooltip
        (box
            :class 'workspace_rep'
            :width 320
            :height 180
            :space-evenly true
            (literal
                :content {wsp.rep}
                :vexpand true
                :hexpand true
            ))
        (button 
            :class "workspace ${wsp.class} ${wsp.focused == 'true' ? 'focused' : ''}"
            :onclick "swaymsg workspace ${wsp.name}"
            :width 0
          (label :class "name " :text "${wsp.name}")
        )
    )
    )
    )
)

